{"/home/travis/build/npmtest/node-npmtest-crx/test.js":"/* istanbul instrument in package npmtest_crx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-crx/lib.npmtest_crx.js":"/* istanbul instrument in package npmtest_crx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_crx = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_crx = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-crx/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-crx && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_crx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_crx\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_crx.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_crx.rollup.js'] =\n            local.assetsDict['/assets.npmtest_crx.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_crx.__dirname + '/lib.npmtest_crx.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-crx/node_modules/crx/src/crx.js":"/* global require, process, Buffer, module */\n'use strict';\n\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar join = path.join;\nvar crypto = require(\"crypto\");\nvar RSA = require(\"node-rsa\");\nvar archiver = require(\"archiver\");\nvar Promise = require(\"es6-promise\").Promise;\nvar resolve = require(\"./resolver.js\");\n\nfunction ChromeExtension(attrs) {\n  if ((this instanceof ChromeExtension) !== true) {\n    return new ChromeExtension(attrs);\n  }\n\n  /*\n   Defaults\n   */\n  this.appId = null;\n\n  this.rootDirectory = '';\n\n  this.publicKey = null;\n\n  this.privateKey = null;\n\n  this.codebase = null;\n\n  this.path = null;\n\n  this.src = '**';\n\n  /*\n  Copying attributes\n   */\n  for (var name in attrs) {\n    this[name] = attrs[name];\n  }\n\n  this.loaded = false;\n}\n\nChromeExtension.prototype = {\n\n  /**\n   * Packs the content of the extension in a crx file.\n   *\n   * @param {Buffer=} contentsBuffer\n   * @returns {Promise}\n   * @example\n   *\n   * crx.pack().then(function(crxContent){\n   *  // do something with the crxContent binary data\n   * });\n   *\n   */\n  pack: function (contentsBuffer) {\n    if (!this.loaded) {\n      return this.load().then(this.pack.bind(this, contentsBuffer));\n    }\n\n    var selfie = this;\n    var packP = [\n      this.generatePublicKey(),\n      contentsBuffer || selfie.loadContents()\n    ];\n\n    return Promise.all(packP).then(function(outputs){\n      var publicKey = outputs[0];\n      var contents = outputs[1];\n\n      selfie.publicKey = publicKey;\n\n      var signature = selfie.generateSignature(contents);\n\n      return selfie.generatePackage(signature, publicKey, contents);\n    });\n  },\n\n  /**\n   * Loads extension manifest and copies its content to a workable path.\n   *\n   * @param {string=} path\n   * @returns {Promise}\n   */\n  load: function (path) {\n    var selfie = this;\n\n    return resolve(path || selfie.rootDirectory)\n      .then(function(metadata){\n        selfie.path = metadata.path;\n        selfie.src = metadata.src;\n\n        selfie.manifest = require(join(selfie.path, \"manifest.json\"));\n        selfie.loaded = true;\n\n        return selfie;\n      });\n  },\n\n  /**\n   * Writes data into the extension workable directory.\n   *\n   * @deprecated\n   * @param {string} path\n   * @param {*} data\n   * @returns {Promise}\n   */\n  writeFile: function (path, data) {\n    var absPath = join(this.path, path);\n\n    /* istanbul ignore next */\n    return new Promise(function(resolve, reject){\n      fs.writeFile(absPath, data, function (err) {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve();\n      });\n    });\n  },\n\n  /**\n   * Generates a public key.\n   *\n   * BC BREAK `this.publicKey` is not stored anymore (since 1.0.0)\n   * BC BREAK callback parameter has been removed in favor to the promise interface.\n   *\n   * @returns {Promise} Resolves to {Buffer} containing the public key\n   * @example\n   *\n   * crx.generatePublicKey(function(publicKey){\n   *   // do something with publicKey\n   * });\n   */\n  generatePublicKey: function () {\n    var privateKey = this.privateKey;\n\n    return new Promise(function(resolve, reject){\n      if (!privateKey) {\n        return reject('Impossible to generate a public key: privateKey option has not been defined or is empty.');\n      }\n\n      var key = new RSA(privateKey);\n\n      resolve(key.exportKey('pkcs8-public-der'));\n    });\n  },\n\n  /**\n   * Generates a SHA1 package signature.\n   *\n   * BC BREAK `this.signature` is not stored anymore (since 1.0.0)\n   *\n   * @param {Buffer} contents\n   * @returns {Buffer}\n   */\n  generateSignature: function (contents) {\n    return new Buffer(\n      crypto\n        .createSign(\"sha1\")\n        .update(contents)\n        .sign(this.privateKey),\n      \"binary\"\n    );\n  },\n\n  /**\n   *\n   * BC BREAK `this.contents` is not stored anymore (since 1.0.0)\n   *\n   * @returns {Promise}\n   */\n  loadContents: function () {\n    var selfie = this;\n\n    return new Promise(function(resolve, reject){\n      var archive = archiver('zip');\n      var contents = new Buffer('');\n\n      if (!selfie.loaded) {\n\t      throw new Error('crx.load needs to be called first in order to prepare the workspace.');\n      }\n\n      archive.on('error', reject);\n\n      /*\n        TODO: Remove in v4.\n        It will be better to resolve an archive object\n        rather than fitting everything in memory.\n\n        @see https://github.com/oncletom/crx/issues/61\n      */\n      archive.on('data', function (buf) {\n        contents = Buffer.concat([contents, buf]);\n      });\n\n      archive.on('finish', function () {\n        resolve(contents);\n      });\n\n      archive\n        .glob(selfie.src, {\n          cwd: selfie.path,\n          matchBase: true,\n          ignore: ['*.pem', '.git', '*.crx']\n        })\n        .finalize();\n    });\n  },\n\n  /**\n   * Generates and returns a signed package from extension content.\n   *\n   * BC BREAK `this.package` is not stored anymore (since 1.0.0)\n   *\n   * @param {Buffer} signature\n   * @param {Buffer} publicKey\n   * @param {Buffer} contents\n   * @returns {Buffer}\n   */\n  generatePackage: function (signature, publicKey, contents) {\n    var keyLength = publicKey.length;\n    var sigLength = signature.length;\n    var zipLength = contents.length;\n    var length = 16 + keyLength + sigLength + zipLength;\n\n    var crx = new Buffer(length);\n\n    crx.write(\"Cr24\" + new Array(13).join(\"\\x00\"), \"binary\");\n\n    crx[4] = 2;\n    crx.writeUInt32LE(keyLength, 8);\n    crx.writeUInt32LE(sigLength, 12);\n\n    publicKey.copy(crx, 16);\n    signature.copy(crx, 16 + keyLength);\n    contents.copy(crx, 16 + keyLength + sigLength);\n\n    return crx;\n  },\n\n  /**\n   * Generates an appId from the publicKey.\n   * Public key has to be set for this to work, otherwise an error is thrown.\n   *\n   * BC BREAK `this.appId` is not stored anymore (since 1.0.0)\n   * BC BREAK introduced `publicKey` parameter as it is not stored any more since 2.0.0\n   *\n   * @param {Buffer|string} [publicKey] the public key to use to generate the app ID\n   * @returns {string}\n   */\n  generateAppId: function (publicKey) {\n    publicKey = publicKey || this.publicKey;\n    if (typeof publicKey !== 'string' && !(publicKey instanceof Buffer)) {\n      throw new Error('Public key is neither set, nor given');\n    }\n    return crypto\n      .createHash(\"sha256\")\n      .update(publicKey)\n      .digest(\"hex\")\n      .slice(0, 32)\n      .replace(/./g, function (x) {\n        return (parseInt(x, 16) + 10).toString(26);\n      });\n  },\n\n  /**\n   * Generates an updateXML file from the extension content.\n   *\n   * BC BREAK `this.updateXML` is not stored anymore (since 1.0.0)\n   *\n   * @returns {Buffer}\n   */\n  generateUpdateXML: function () {\n    if (!this.codebase) {\n      throw new Error(\"No URL provided for update.xml.\");\n    }\n\n    return new Buffer(\n      \"<?xml version='1.0' encoding='UTF-8'?>\\n\" +\n      \"<gupdate xmlns='http://www.google.com/update2/response' protocol='2.0'>\\n\" +\n      \"  <app appid='\" + (this.appId || this.generateAppId()) + \"'>\\n\" +\n      \"    <updatecheck codebase='\" + this.codebase + \"' version='\" + this.manifest.version + \"' />\\n\" +\n      \"  </app>\\n\" +\n      \"</gupdate>\"\n    );\n  }\n};\n\nmodule.exports = ChromeExtension;\n","/home/travis/build/npmtest/node-npmtest-crx/node_modules/crx/src/resolver.js":"'use strict';\n\nvar path = require(\"path\");\nvar join = path.join;\nvar Promise = require(\"es6-promise\").Promise;\n\nmodule.exports = function resolve(pathOrFiles) {\n  return new Promise(function(resolve, reject){\n    // legacy and original mode\n    if (typeof pathOrFiles === 'string') {\n      return resolve({\n        path: pathOrFiles,\n        src: '**',\n      });\n    }\n\n    // new mode, with a list of files\n    else if (Array.isArray(pathOrFiles)) {\n      var manifestFile = '';\n\n      pathOrFiles.some(function(f){\n        if (/(^|\\/)manifest.json$/.test(f)) {\n          manifestFile = f;\n          return true;\n        }\n      });\n\n      if (!manifestFile) {\n        return reject(new Error('Unable to locate a manifest file in your list of files.'))\n      }\n\n      var manifestDir = path.dirname(manifestFile);\n\n      return resolve({\n        path: path.resolve(manifestDir),\n        src: '{' + pathOrFiles.map(function(f){\n          return path.relative(manifestDir, f);\n        }).join(',') + '}'\n      })\n    }\n\n    //\n    else {\n      reject(new Error('load path is none of a folder location nor a list of files to pack'))\n    }\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-crx/node_modules/crx/bin/crx.js":"#!/usr/bin/env node\n\nvar path = require(\"path\");\nvar fs = require(\"fs\");\nvar rsa = require('node-rsa');\nvar Promise = require('es6-promise').Promise;\n\nvar program = require(\"commander\");\nvar ChromeExtension = require(\"..\");\nvar pkg = require('../package.json');\n\nvar resolve = path.resolve;\nvar join = path.join;\n\nvar cwd = process.cwd();\n\nprogram.version(pkg.version);\n// coming soon\n// .option(\"-x, --xml\", \"output autoupdate xml instead of extension \")\n\nprogram\n  .command(\"keygen [directory]\")\n  .option(\"--force\", \"overwrite the private key if it exists\")\n  .description(\"generate a private key in [directory]/key.pem\")\n  .action(keygen);\n\nprogram\n  .command(\"pack [directory]\")\n  .description(\"pack [directory] into a .crx extension\")\n  .option(\"-o, --output <file>\", \"write the crx content to <file> instead of stdout\")\n  .option(\"--zip-output <file>\", \"write the zip content to <file>\")\n  .option(\"-p, --private-key <file>\", \"relative path to private key [key.pem]\")\n  .option(\"-b, --max-buffer <total>\", \"max amount of memory allowed to generate the crx, in byte\")\n  .action(pack);\n\nprogram.parse(process.argv);\n\n/**\n * Read a specified key file from disk\n * @param {String} keyPath path to the key to read\n * @returns {Promise}\n */\nfunction readKeyFile(keyPath) {\n  return new Promise(function (resolve, reject) {\n    fs.readFile(keyPath, function (err, data) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n}\n\n/**\n * Generate a new key file\n * @param {String} keyPath path of the key file to create\n * @returns {Promise}\n */\nfunction generateKeyFile(keyPath) {\n  return new Promise(function(resolve, reject) {\n    var key = new rsa({b: 2048}),\n        keyVal = key.exportKey('pkcs1-private-pem');\n\n    fs.writeFile(keyPath, keyVal, function(err){\n      if (err) {\n        throw err;\n      }\n\n      console.log('Key file has been generated at %s', keyPath);\n\n      resolve(keyVal);\n    });\n  });\n}\n\nfunction keygen (dir, program) {\n  dir = dir ? resolve(cwd, dir) : cwd;\n\n  var keyPath = join(dir, \"key.pem\");\n\n  fs.exists(keyPath, function (exists) {\n    if (exists && !program.force) {\n      throw new Error('key.pem already exists in the given location.');\n    }\n\n    generateKeyFile(keyPath);\n  });\n}\n\nfunction pack (dir, program) {\n  var input = dir ? resolve(cwd, dir) : cwd;\n  var keyPath = program.privateKey ? resolve(cwd, program.privateKey) : join(input, \"key.pem\");\n  var output;\n\n  if (program.output) {\n    if (path.extname(program.output) !== '.crx') {\n      throw new Error('-o file is expected to have a `.crx` suffix: [' + program.output + '] was given.');\n    }\n  }\n\n  if (program.zipOutput) {\n    if (path.extname(program.zipOutput) !== '.zip') {\n      throw new Error('--zip-output file is expected to have a `.zip` suffix: [' + program.zipOutput + '] was given.');\n    }\n  }\n\n  var crx = new ChromeExtension({\n    rootDirectory: input,\n    maxBuffer:     program.maxBuffer\n  });\n\n  readKeyFile(keyPath).then(null, function (err) {\n    // If the key file doesn't exist, create one\n    if (err.code === 'ENOENT') {\n      return generateKeyFile(keyPath);\n    } else {\n      throw err;\n    }\n  }).then(function (key) {\n    crx.privateKey = key;\n  }).then(function () {\n    crx.load().then(function () {\n      return crx.loadContents();\n    }).then(function (zipBuffer) {\n\n      if (program.zipOutput) {\n        var outFile = resolve(cwd, program.zipOutput);\n\n        fs.createWriteStream(outFile).end(zipBuffer);\n      }\n\n      return crx.pack(zipBuffer);\n    }).then(function (crxBuffer) {\n\n      if (program.output) {\n        output = program.output;\n      } else {\n        output = path.basename(cwd) + '.crx';\n      }\n\n      var outFile = resolve(cwd, output);\n      (outFile ? fs.createWriteStream(outFile) : process.stdout).end(crxBuffer);\n    }).then(function () {\n      console.log('%s has been generated in %s', output, cwd);\n    });\n  });\n}\n\nmodule.exports = program;\n"}